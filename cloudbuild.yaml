steps:
  # # Install dependencies
  # - name: python
  #   entrypoint: pip
  #   args: ["install", "-r", "requirements.txt", "--user"]
  #   id: 'install-dependencies'
  #   waitFor: ['-']
# Docker Build - proxy
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'us-central1-docker.pkg.dev/${_PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/sample-sql-proxy:latest',
        '-t', 'us-central1-docker.pkg.dev/${_PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/sample-sql-proxy:$COMMIT_SHA',
        '-t', 'us-central1-docker.pkg.dev/${_PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/sample-sql-proxy:$BUILD_ID', '.']
    id: 'build-proxy-image'
# Docker push to Google Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-central1-docker.pkg.dev/${_PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/sample-sql-proxy:$COMMIT_SHA']
    id: 'push-proxy-image-to-artifact-registry'
    waitFor: ['build-proxy-image']
#proxy bin (checar si sirve la substitution)
  - id: "docker-layer"
    name: "gcr.io/cloud-builders/docker"
    entrypoint: /bin/bash
    args:
      - '-c'
      - |
        echo "FROM $_IMAGE_NAME_PROXY
        COPY --from=gcr.io/cloud-sql-connectors/cloud-sql-proxy /cloud-sql-proxy /cloudsql/cloud-sql-proxy" > Dockerfile-proxy;

        docker build -f Dockerfile-proxy -t ${_IMAGE_NAME_PROXY}-proxy .
    waitFor: ['push-proxy-image-to-artifact-registry']
# Docker Build
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'us-central1-docker.pkg.dev/${_PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/cloudbuild-practice-image:latest',
        '-t', 'us-central1-docker.pkg.dev/${_PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/cloudbuild-practice-image:$COMMIT_SHA',
        '-t', 'us-central1-docker.pkg.dev/${_PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/cloudbuild-practice-image:$BUILD_ID', '.']
    id: 'build-image'
    waitFor: ['docker-layer']
# Docker push to Google Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-central1-docker.pkg.dev/${_PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/cloudbuild-practice-image:$COMMIT_SHA']
    id: 'push-image-to-artifact-registry'
    waitFor: ['build-image']
#cloud run
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'cloudbuild-practice-service'
      - '--image'
      - 'us-central1-docker.pkg.dev/${_PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/cloudbuild-practice-image:$COMMIT_SHA'
      - '--region'
      - 'us-central1'
      - '--port=8080'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--project=algoritmos-1997'
    waitFor: ['push-image-to-artifact-registry']
    id: 'deploy-to-cloud-run'

images:
- 'us-central1-docker.pkg.dev/${_PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/cloudbuild-practice-image:latest'
- 'us-central1-docker.pkg.dev/${_PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/cloudbuild-practice-image:$COMMIT_SHA'
- 'us-central1-docker.pkg.dev/${_PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/cloudbuild-practice-image:$BUILD_ID'

options:
  dynamic_substitutions: true

substitutions:
  _PROJECT_ID: 'algoritmos-1997'
  _ARTIFACT_REGISTRY_REPO: 'algoritmos-artifacts'
  _DATABASE_USER: myuser
  _DATABASE_NAME: mydatabase
  _INSTANCE_CONNECTION_NAME: ${PROJECT_ID}:us-central1:myinstance
  _DATABASE_PORT: '5432'
  _DATABASE_TYPE: postgres
  _DATABASE_PASSWORD_KEY: dbPass
  _IMAGE_NAME_PROXY: us-central1-docker.pkg.dev/${_PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/sample-sql-proxy:latest
  _IMAGE_NAME: gcr.io/${PROJECT_ID}/sample-sql-proxy

availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/${_DATABASE_PASSWORD_KEY}/versions/latest
      env: DATABASE_PASS
  
# # Deploy to Cloud Run
#   - name: google/cloud-sdk
#     args: ['gcloud', 'run', 'deploy', 'helloworld-${SHORT_SHA}',
#           '--image=us-central1-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/myimage:${SHORT_SHA}',
#           '--region', 'us-central1', '--platform', 'managed',
#           '--allow-unauthenticated']

# https://cloud.google.com/build/docs/building/build-containerize-python?hl=es-419